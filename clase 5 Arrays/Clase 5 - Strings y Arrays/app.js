/* 
  üë®üèº‚Äçüè´ Profesor: Leonardo Galante -> https://leonardogalante.com

  üìï Carrera Front-end: Nivel 2 Programador Web

  üèé Inicio: Mi√©rcoles 25 de Octubre 

  üèÅ Fin: Mi√©rcoles 3 de Enero

  üìÖ D√≠as y Horarios: L√∫nes y Mi√©rcoles de 18:30hs a 22:00hs 

  üöª Ba√±os al fondo, al lado de las escaleras

  ‚òïÔ∏è Recreo: 15 minutos a las 20:15hs y hay caf√©, agua caliente, galletitas.

  üè¢ Lugar: Urban Station - Didi Soho - Sala Auditorio - Honduras 4762 (40min, salir m√°x 17:30hs)

  ‚úÖ ToDo: 
      * Presentarnos
      * Tomar asistencia
      * Validaci√≥n Slack (soporte@coderhouse.com)
      * Completar encuestas a las 21:45hs (10min antes)
      * Requisitos para el certificado: 80% de asistencia
      * Plataforma https://plataforma.coderhouse.com
      * Sala de Chat (Slack), canal #curso2610 https://developershouse.slack.com
      * Devoluci√≥n de TPs por GitHub y Plataforma
      * Organizar bien la sala, proyector y sillas
      * Podemos pedir zapatillas/snacks en recepci√≥n si hace falta

  üõ† Herramientas:
      * Visual Studio Code
      * Prettier (Plugin)

  üëå Slides Introducci√≥n a JavaScript: https://intro-js.now.sh

  üìÑ Documentaci√≥n de JavaScript: https://developer.mozilla.org/es/docs/Web/JavaScript
          
  üì∂ Wi-Fi: Nombre -> "DIDIHoteles" - Contrase√±a: "holadidi"

                  
*/

/* üöÉ Arrays üöÉ */

// üßù‚Äç 1. Qu√© es un arreglo o array ?
// üßù‚Äç 2. Como acceder a cada elemento?
// üßù‚Äç 3. Como saber la cantidad de elementos?
// üßù‚Äç 4. Cu√°l es la posici√≥n del √∫ltimo elemento?

/* 
  Primer ejercicio de meses del a√±o üìÖ 
    1. Dado el siguiente array de meses del a√±o:
      var meses = [
          'Enero', // √≠ndice `0`
          'Febrero',
          'Marzo',
          'Abril',
          'Mayo',
          'Junio',
          'Julio',
          'Agosto',
          'Septiembre',
          'Octubre',
          'Noviembre',
          'Diciembre'  // √≠ndice 11, equivalente a `meses.length - 1`
      ];

    2. Escribir un programa que:
      2.1 Declare y asigne una variable que tenga como valor el n√∫mero del mes de tu cumplea√±os.
      2.2 Muestre por terminal el nombre del mes de tu cumplea√±os.

  Segundo ejercicio de planetas üåé
    1.Dado los siguientes arrays:
      var meses = [
          'Enero',
          'Febrero',
          'Marzo',
          'Abril',
          'Mayo',
          'Junio',
          'Julio',
          'Agosto',
          'Septiembre',
          'Octubre',
          'Noviembre',
          'Diciembre'
      ];

      var planetas = [
          'Mercurio',
          'Venus',
          'Tierra',
          'Marte',
          'Saturno',
          'Jupiter',
          'Urano',
          'Neptuno',
          'Plut√≥n'
      ];

      2. Escribir un programa que:
        2.1 Muestre por la consola la cantidad de elementos que tiene cada uno.
        2.2 Muestre por la consola el √∫ltimo elemento de cada array (usando la propiedad length que tienen los arrays).
        2.3 Muestre por la consola el cuarto planeta (Marte).
 */

// üßù‚Äç 6. Metodos mutables como .push() y .pop() (insertar y eliminar al final, recordar push retorna nueva longitud y pop retorna elemento)
// üßù‚Äç 7. Metodos mutables como .unshift() y .shift() (insertar y eliminar al principio, recordar unshift retorna nueva longitud y shift() retorna elemento)

/* 
    Tercer ejercicio Lista de Super üçï
      1. Crea un nuevo arreglo y guardalo en la variable listaDeSuper
      2. Us√° la notacion con corchetes y agreg√° dos productos que ten√©s que comprar. Ej listaDeSuper[0] = "sal"
      3. Agrega dos productos m√°s a la lista al final del array
      3. Acced√© al primer elemento de tu lista usando la notaci√≥n de corchetes.
      4. Elimina el primer y √∫ltimo elemento de la lista
      5. Acced√© a ese √∫ltimo ingrediente usando la variable ultimoElemento
*/

// üßù‚Äç 8. M√©todo .indexOf() para saber en que posici√≥n se encuentra en el array
// üßù‚Äç 9. M√©todo .includes() para saber si un elemento se encuentra o no en el array
// üßù‚Äç 10. M√©todo .sort() para ordenar los elementos en el array
// üßù‚Äç 11. M√©todo .reverse() para invertir el orden de los elementos del array
// üßù‚Äç 12. M√©todo .concat() para concatenar un array a otro array que querramos

// üßù‚Äç 8. Los arrays son pasados por valor o por referencia?
// üßù‚Äç 9. M√©todo inmutable slice() para generar una copia de nuestro array
// üßù‚Äç 10. Usar slice() para dividir nuestro arreglo desde donde hasta donde querramos (exclusive)
// üßù‚Äç 11. M√©todo mutable splice() para eliminar una cantidad de elementos desde donde hasta donde querramos (inclusive)
// üßù‚Äç 12. M√©todo split() de los Strings para separar en partes nuestro string, guardando cada parte cada elemento de nuestro array
// üßù‚Äç 13. M√©todo mutable join() unir√° los elementos de nuestro array con el string que querramos
// üßù‚Äç 14. Como introducci√≥n veamos For loop (si llegamos con el tiempo)

/* 
    Cuarto ejercicio sumArray‚ûï
      1. Crea una funci√≥n sumArray que acepte un arreglo de numeros y devuelva la suma de todos los numeros del arreglo.
         Usa el codigo de abajo para testear tu funci√≥n:
            sumArray([1,2,3]) // 6
            sumArray([10, 3, 10, 4]) // 27
            sumArray([-5,100]) // 95
*/

// üßù‚Äç 1. Qu√© es un arreglo o array ?
// Una colecci√≥n ordenada de elementos tantos homog√©neos como hetereg√©neos
// Nos sirven para hacer listas de cosas

var notas = [4, 4, 6, 7, 2, 7, 8, 10, 2, 4, 7, 7, 9, 6]

// üßù‚Äç 2. Como acceder a cada elemento?
// Lectura
console.log(notas[0])

var cuartaNota = notas[3]

console.log(notas[6])

// Escritura
notas[7] = 9

console.log(notas[7])

console.log(notas)

// üßù‚Äç 3. Como saber la cantidad de elementos?
// Con la propiedad .length obtenemos la longitud de nuestro array
console.log(notas.length)

// üßù‚Äç 4. Cu√°l es la posici√≥n del √∫ltimo elemento?
var ultimaPosicion = notas.length - 1

console.log(ultimaPosicion)

console.log(notas[ultimaPosicion])

var meses = [
  'Enero', // √≠ndice `0`
  'Febrero',
  'Marzo',
  'Abril',
  'Mayo',
  'Junio',
  'Julio',
  'Agosto',
  'Septiembre',
  'Octubre',
  'Noviembre',
  'Diciembre' // √≠ndice 11, equivalente a `meses.length - 1`
]

var planetas = [
  'Mercurio',
  'Venus',
  'Tierra',
  'Marte',
  'Saturno',
  'Jupiter',
  'Urano',
  'Neptuno',
  'Plut√≥n'
]

console.log(meses.length)

console.log(planetas.length)

var ultimaPosicionMeses = meses.length - 1
var ultimaPosicionPlanetas = planetas.length - 1

console.log(meses[ultimaPosicionMeses])
console.log(planetas[ultimaPosicionPlanetas])

console.log(planetas[3])

// üßù‚Äç 6. Metodos mutables como .push() y .pop()
//  (insertar y eliminar al final, recordar push retorna nueva longitud y pop retorna elemento)

// M√©todo .push()
// Nos appendea o agrega al final de nuestro array un elemento que le pasamos como par√°metro

var listaAlumnos = [
  'Anahi Sol Mansilla',
  'Edgar Ramirez',
  'Abel Gustavo',
  'Yamil Amando Selene',
  'Fernando Castoldi'
]

listaAlumnos.push('Mercedes Baylac')

console.log(listaAlumnos.length)

var nuevaLongitud = listaAlumnos.push('Gabriel De Simone')

console.log(nuevaLongitud)

// M√©todo .pop()
// Elimina el √∫ltimo elemento del array y a su vez lo devuelve

console.log(listaAlumnos.pop())

console.log(listaAlumnos)

// üßù‚Äç 7. Metodos mutables como .unshift() y .shift()
// (insertar y eliminar al principio, recordar unshift retorna nueva longitud y shift() retorna elemento)

// M√©todo .unshift()
// A contrario de .push() ahora .unshift() agrega un elemento que le pasemos como par√°metro
// en la primer posici√≥n del array, tambi√©n nos devuelve la nueva longitud del array
console.log(listaAlumnos.unshift('Nehuen Diaz'))

console.log(listaAlumnos)

// M√©todo .shift()
// Al contrario de .pop() ahora .shift() remueve el primer elemento del array y nos lo devuelve
console.log(listaAlumnos.shift())

// Mutabilidad
// Los m√©todos vistos hasta ahora son mutables porque modifican nuestra variable o array original

/* 
    Tercer ejercicio Lista de Super üçï
      1. Crea un nuevo arreglo y guardalo en la variable listaDeSuper
      2. Us√° la notacion con corchetes y agreg√° dos productos que ten√©s que comprar. Ej listaDeSuper[0] = "sal"
      3. Agrega dos productos m√°s a la lista al final del array
      4. Acced√© al primer elemento de tu lista usando la notaci√≥n de corchetes.
      5. Elimina el primer y √∫ltimo elemento de la lista
      6. Acced√© a ese √∫ltimo ingrediente usando la variable ultimoElemento
*/
//       1. Crea un nuevo arreglo y guardalo en la variable listaDeSuper

var listaDeSuper = []

//       2. Us√° la notacion con corchetes y agreg√° dos productos que ten√©s que comprar. Ej listaDeSuper[0] = "sal"

listaDeSuper[0] = 'Harina'
listaDeSuper[1] = 'Huevos'

//       3. Agrega dos productos m√°s a la lista al final del array

listaDeSuper.push('Aceite')
listaDeSuper.push('Manteca')

//       4. Acced√© al primer elemento de tu lista usando la notaci√≥n de corchetes.

console.log(listaDeSuper[0])

//       5. Elimina el primer y √∫ltimo elemento de la lista
console.log(listaDeSuper)

listaDeSuper.shift()

console.log(listaDeSuper)

listaDeSuper.pop()

console.log(listaDeSuper)

//       6. Acced√© a ese √∫ltimo ingrediente usando la variable ultimoElemento

var ultimaPosicion = listaDeSuper.length - 1

console.log(listaDeSuper[ultimaPosicion])

// üßù‚Äç 8. M√©todo .indexOf() para saber en que posici√≥n se encuentra en el array

// .indexOf() nos devuelve la posici√≥n de la primer coincidencia que matchee lo que busquemos
// nos devuelve -1 si el elemento no se encuentra en el array

console.log(listaAlumnos)

var posicionGustavo = listaAlumnos.indexOf('Gabriel De Simone')

console.log(posicionGustavo)

// üßù‚Äç 9. M√©todo .includes() para saber si un elemento se encuentra o no en el array
console.log(listaAlumnos.includes('Abel Gustavo'))

/* var alumnoIngresado = prompt('Ingresa tu nombre y apellido')

var estaElAlumno = listaAlumnos.includes(alumnoIngresado)

if (estaElAlumno) {
  alert('Estas en el sistema')
} else {
  alert('No estas en el sistema')
} */

// üßù‚Äç 10. M√©todo .sort() para ordenar los elementos en el array

var numerosAleatorios = [3, 9, 7, 4, 2, 9, 1]

console.log(numerosAleatorios)

// El m√©todo .sort() ordena de menor a mayor
numerosAleatorios.sort()

console.log(numerosAleatorios)

// üßù‚Äç 11. M√©todo .reverse() para invertir el orden de los elementos del array

// El primer elemento pasa a ser el √∫ltimo y viceversa
console.log(listaAlumnos)

listaAlumnos.reverse()

console.log(listaAlumnos)

// üßù‚Äç 12. M√©todo .concat() para concatenar un array a otro array que querramos

// El m√©todo .concat() nos permite concanetar un array con uno o m√°s arrays
// Pasandoselos como par√°metros separados por coma
var notasPrimerGrado = [7, 7, 6, 8, 9]
var notasSegundoGrado = [9, 7, 6, 5, 9, 4]

var notasTotales = notasPrimerGrado.concat(notasSegundoGrado)

console.log(notasTotales)

// üßù‚Äç 9. M√©todo inmutable slice() para generar una copia de nuestro array
// El m√©todo .slice() nos devuelve una copia de nuestro array
var copiaPrimerGrado = notasPrimerGrado.slice()

copiaPrimerGrado.push(4)

console.log(copiaPrimerGrado)

console.log(notasPrimerGrado)

// üßù‚Äç 10. Usar slice() para dividir nuestro arreglo desde donde hasta donde querramos (exclusive)

// Generamos un subconjunto de nuestro array
// Donde el primer par√°metro es de donde queremos cortarlo de manera inclusiva
// Y erl segundo par√°metro (opcional) es hasta donde querramos cortalo de manera exclusiva
console.log(listaAlumnos)

var lAlumnos = listaAlumnos.slice(3, 5)

console.log(lAlumnos)
